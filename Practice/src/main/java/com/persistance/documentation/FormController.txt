import javax.persistence.CascadeType;

package com.persistance.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.persistance.models.Role;
import com.persistance.models.Users;
import com.persistance.repository.RoleRepository;
import com.persistance.repository.UserRepository;

@Controller
public class FormController21 {
	
	@Autowired // This means to get the bean called userRepository
		   // Which is auto-generated by Spring, we will use it to handle the data
		   // this will take care of persistence
	private UserRepository userRepository;
//	
//	@GetMapping("/")
//	// when the GET HTTP request for the index is called, it creates a user
//	// object saved in a Model object's String as attribute that can receive the
//	// arguments of the object and pass them as attributes to the destination.
//	// Great for form handling
//    public String registerForm21(Model model) {
//        model.addAttribute("users", new Users());
//        model.addAttribute("role", new Role());
//        return "index";
//    }
//	
//	@PostMapping(path="/add") // Map ONLY POST Requests... @GetMapping does the opposite
//	public /*@ResponseBody*/ String addNewUser21 (@RequestParam String username
//		, @RequestParam String email, @RequestParam String password,
//		// @RequestParam means it is a parameter from the GET or POST request
//		@ModelAttribute Users user) {
//	// @ResponseBody means the returned String is the response, not a view name
//	
//	//////////////////////////
//	Role role1 = new Role("USER");
//	List<Role> roles = new ArrayList<>();
//	roles.add(role1);
//	//////////////////////////
//	
//	Users user1 = new Users();
//	user1.setActive(1);
//	user1.setEmail(email);
//	user1.setUsername(username);
//	user1.setPassword(password);
//	//////////////////////////
//	user1.setRoles(roles);
//	//////////////////////////
	/*this will also persist the role because of the cascade = CascadeType.ALL which
	 * update all the classes referenced in the current class*/ 
//	userRepository.save(user1);
//	return "saved";
//	}
//
//	@GetMapping(path="/all")
//	public @ResponseBody Iterable<Users> getAllUsers21() {
//	// This returns a JSON or XML with the users
//	return userRepository.findAll();
//	}
//	
//	@PreAuthorize("hasAnyRole('ADMIN')") /*method level authorization; enabled 
//	in security file through the @EnableGlobalMethodSecurity*/
//	@GetMapping(path="/secured/all")
//	public @ResponseBody String getAllUsers221() {
//	// This returns a JSON or XML with the users
//	
//	return "ONLY ADMINS CAN SEE THIS PAGE... YOU ARE AN ADMIN!!";
//	}
//
//}
